function placeNewTilesInPreviewData(obj,~,~)
    % Place new tiles into the preview image 
    %
    %  function placeNewTilesInPreviewData(obj,~,~)
    %
    % Purpose
    % This callback places newly acquired tiles into the preview image of the 
    % BakingTray GUI. This method uses the property "previewTilePositions" to
    % determine where to place the tiles and locates at those positions in the
    % array which houses the preview section image data. This array can be 
    % found: acquisition_view.lastPreviewImageStack array.
    % This callback is run when the tile position increments so that it only
    % runs once per X/Y position.


    if obj.processLastFrames==false || obj.acquisitionInProgress == false
        return
    end

    % TODO -- whilst we de-bug we switch according to whether or not this is an auto-ROI. 
    % In future this switch can go away and all tiles will be laid down using the positions

    if strcmp(obj.recipe.mosaic.scanmode,'tiled: auto-ROI')
    %%    fprintf('Placing tiles from grid of %d tiles: auto-ROI\n', size(obj.previewTilePositions,1))

        if obj.lastTilePos.X>0 && obj.lastTilePos.Y>0
            % Caution changing these lines: tiles may be rectangular
            % Tiles are placed based upon the array "previewTilePositions" which is generated by BT.initialisePreviewImageData
            x = (1:size(obj.downSampledTileBuffer,1)) + obj.previewTilePositions(obj.lastTileIndex,2);
            y = (1:size(obj.downSampledTileBuffer,2)) + obj.previewTilePositions(obj.lastTileIndex,1);

            %Place the tiles into the full image grid so it can be plotted (there is a listener on this property to update the plot)
            obj.lastPreviewImageStack(y,x,:,:) = obj.downSampledTileBuffer;


            obj.downSampledTileBuffer(:) = 0; %wipe the buffer 

        end % obj.lastTilePos.X>0 && obj.lastTilePos.Y>0

    else
        % This is a "normal" recording (not auto-ROI)
    %%   %fprintf('Placing tiles from grid of %d tiles: vanilla\n', size(obj.previewTilePositions,1))
        % The first tile position in the grid is [0,0]. We enter the following if statment so long as the stages are not 
        % at this inital position.
        if obj.lastTilePos.X>0 && obj.lastTilePos.Y>0
            % Caution changing these lines: tiles may be rectangular
            % Tiles are placed based upon the array "previewTilePositions" which is generated by BT.initialisePreviewImageData
            y = (1:size(obj.downSampledTileBuffer,1)) + obj.previewTilePositions(obj.lastTileIndex,2);
            x = (1:size(obj.downSampledTileBuffer,2)) + obj.previewTilePositions(obj.lastTileIndex,1);

            %Place the tiles into the full image grid so it can be plotted (there is a listener on this property to update the plot)
            obj.lastPreviewImageStack(y,x,:,:) = obj.downSampledTileBuffer;

            %Only update the section image every so often to avoid slowing down the acquisition
            n=obj.currentTilePosition;
            if n==1 || mod(n,obj.updatePreviewEveryNTiles)==0 || n>=length(obj.positionArray)
                obj.updateSectionImage
            end

            obj.downSampledTileBuffer(:) = 0; %wipe the buffer 

        end % obj.lastTilePos.X>0 && obj.lastTilePos.Y>0
    end

end %placeNewTilesInPreviewData
