function populateRecipePanel(obj)
    % Called once by the constructure of the view class to build the recipe panel


    % The recipeFieldLabels and recipeProperty properties are used by the
    % later for loop to build the text and edit boxes associated with the 
    % recipe.

    obj.recipePropertyNames  = {'sample||objectiveName', 'sample||ID', ...
                'mosaic||scanmode', 'mosaic||numSections', ...
                'mosaic||numOpticalPlanes', 'mosaic||sectionStartNum', ...
                'mosaic||overlapProportion', 'mosaic||sampleSize', ...
                'mosaic||cuttingSpeed','mosaic||cutSize', 'mosaic||sliceThickness', ...
                };

    obj.recipeFieldLabels = {'Objective Name', 'Sample ID', ...
                'Scan Mode', 'Num. Sections', ...
                'Num. Optical Planes', 'Section Start Num.', ...
                'Overlap Prop.', 'Sample Size (mm)', ...
                'Cut Speed (mm/s)', 'Cut Size (mm)', 'Slice Thickness (mm)', ...
                };

    obj.recipeToolTips = {'The name of the objective.\nCurrently only used as a note.', ...
                sprintf('String defining the sample ID.\nSpaces will be replaced with underscores.\nNames with leading digits will have a string appended.'), ...
                'Scan mode (currently can only be set to "tile"', ...
                'Number of sections to cut and image.', ...
                'The numeric ID of the first section', ...
                'The number of optical planes within a section', ...
                'Proportion of overlap between adjacent tiles', ...
                'Size of the sample in mm', ...
                'Cutting speed in mm/s', ...
                'How far to cut from the cutting start point', ...
                'Thickness of each slice in mm', ...
                };


    % Flip to order nicely (sample at the top)
    obj.recipeFieldLabels=fliplr(obj.recipeFieldLabels); 
    obj.recipePropertyNames=fliplr(obj.recipePropertyNames);
    obj.recipeToolTips=fliplr(obj.recipeToolTips);


    commonRecipeTextEditSettings={'Parent', obj.recipePanel, ...
                'Style','edit', 'Units', 'pixels', 'FontSize', obj.fSize, ...
                'HorizontalAlignment', 'Left', ...
                'Callback',@obj.updateRecipePropertyInRecipeClass};


    % Build the recipe edit boxes using the properties: recipeFieldLabels and recipePropertyNames.
    for ii=length(obj.recipePropertyNames):-1:1 %So the tab focus moves down the window not up it

        thisProp = strsplit(obj.recipePropertyNames{ii},'||');

        %Add a text label
        obj.recipeTextLabels.(thisProp{1}).(thisProp{2}) = obj.makeRecipeLabel([0,18*(ii-1)+5,140,18], obj.recipeFieldLabels{ii});
        obj.recipeTextLabels.(thisProp{1}).(thisProp{2}).VerticalAlignment='middle';
        %Add a text entry box
        if ~strcmp(thisProp{2},'sampleSize') %Because sample size is a structure that describes both X and Y
            %Numeric boxes can be smaller than text boxes, so figure out which is which and set the length:
            if ~isempty(regexp(obj.recipeFieldLabels{ii},'\(mm', 'once')) || ...
                ~isempty(regexp(obj.recipeFieldLabels{ii},'Prop\.', 'once')) || ...
                ~isempty(regexp(obj.recipeFieldLabels{ii},'Num\.', 'once')) 
                textEditWidth=45;
            else
                textEditWidth=145;
            end
            obj.recipeEntryBoxes.(thisProp{1}).(thisProp{2}) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Position', [140, 18*(ii-1)+5, textEditWidth, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', obj.recipePropertyNames{ii}); %The tag is used by obj.updateRecipePropertyInRecipeClass to update the recipe

        elseif strcmp(thisProp{2},'sampleSize')

            %We need a separate X and Y box for the sample size
            obj.recipeTextLabels.(thisProp{1}).([thisProp{2},'X']) = obj.makeRecipeLabel([152,18*(ii-1)+7,10,18],'X=');
            obj.recipeTextLabels.(thisProp{1}).([thisProp{2},'Y']) = obj.makeRecipeLabel([215,18*(ii-1)+7,10,18],'Y=');

            obj.recipeEntryBoxes.(thisProp{1}).([thisProp{2},'X']) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Position', [160, 18*(ii-1)+5, 30, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', [obj.recipePropertyNames{ii},'||X']);

            obj.recipeEntryBoxes.(thisProp{1}).([thisProp{2},'Y']) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Position', [225, 18*(ii-1)+5, 35, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', [obj.recipePropertyNames{ii},'||Y']);
        end

    end

    if obj.suppressToolTips
        %just wipe them all
        p=fields(obj.recipeEntryBoxes);
        for ii=1:length(p)
            tmp=obj.recipeEntryBoxes.(p{ii});
            pp=fields(tmp);
            for kk=1:length(pp)
                set(tmp.(pp{kk}),'TooltipString','')
            end
        end
    end

end %populateRecipePanel
