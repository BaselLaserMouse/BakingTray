function populateRecipePanel(obj)
    % Called once during the construction of the view class to build the recipe panel.
    % This method is called by the buildWindow method, which in turn is called by
    % the view constructor.
    %
    % The values in the GUI are filled in by the method updateAllRecipeEditBoxesAndStatusText
    % When the values are changed, the callback updateRecipePropertyInRecipeClass runs.



    % The recipeFieldLabels and recipeProperty properties are used by the
    % later for loop to build the text and edit boxes associated with the 
    % recipe.

    obj.recipePropertyNames  = {'sample||objectiveName', 'sample||ID', ...
                'mosaic||scanmode', 'mosaic||numSections', ...
                'mosaic||numOpticalPlanes', 'mosaic||sectionStartNum', ...
                'mosaic||overlapProportion', 'mosaic||sampleSize', ...
                'mosaic||cuttingSpeed','mosaic||cutSize', 'mosaic||sliceThickness', ...
                };

    obj.recipeFieldLabels = {'Objective Name', 'Sample ID', ...
                'Scan Mode', 'Num. Sections', ...
                'Num. Optical Planes', 'Section Start Num.', ...
                'Overlap Prop.', 'Sample Size (mm)', ...
                'Cut Speed (mm/s)', 'Cut Size (mm)', 'Slice Thickness (mm)', ...
                };

    obj.recipeToolTips = {'The name of the objective.\nCurrently only used as a note.', ...
                sprintf('String defining the sample ID.\nSpaces will be replaced with underscores.\nNames with leading digits will have a string appended.'), ...
                'Scan mode (currently can only be set to "tile"', ...
                'Number of sections to cut and image.', ...
                'The numeric ID of the first section', ...
                'The number of optical planes within a section', ...
                'Proportion of overlap between adjacent tiles', ...
                'Size of the sample in mm', ...
                'Cutting speed in mm/s', ...
                'How far to cut from the cutting start point', ...
                'Thickness of each slice in mm', ...
                };


    % Flip to order nicely (sample at the top)
    obj.recipeFieldLabels=fliplr(obj.recipeFieldLabels); 
    obj.recipePropertyNames=fliplr(obj.recipePropertyNames);
    obj.recipeToolTips=fliplr(obj.recipeToolTips);



    % Define settings to be applied to all edit boxes
    commonRecipeTextEditSettings={'Parent', obj.recipePanel, ...
                'Style','edit', 'Units', 'pixels', 'FontSize', obj.fSize, ...
                'HorizontalAlignment', 'Left', ...
                'Callback',@obj.updateRecipePropertyInRecipeClass};

    % Build the recipe edit boxes using the properties: recipeFieldLabels and recipePropertyNames.
    for ii=length(obj.recipePropertyNames):-1:1 %So the tab focus moves down the window not up it

        thisProp = strsplit(obj.recipePropertyNames{ii},'||');

        %Add a text label
        obj.recipeTextLabels.(thisProp{1}).(thisProp{2}) = obj.makeRecipeLabel([0,18*(ii-1)+5,140,18], obj.recipeFieldLabels{ii});
        obj.recipeTextLabels.(thisProp{1}).(thisProp{2}).VerticalAlignment='middle';
        %Add a text entry box

        % Certain recipe fields need unusual things done, so we handle those first in the following if statement
        if strcmp(thisProp{2},'sampleSize') 
            %Because sample size is a structure that describes both X and Y
            obj.recipeTextLabels.(thisProp{1}).([thisProp{2},'X']) = obj.makeRecipeLabel([152,18*(ii-1)+7,10,18],'X=');
            obj.recipeTextLabels.(thisProp{1}).([thisProp{2},'Y']) = obj.makeRecipeLabel([215,18*(ii-1)+7,10,18],'Y=');

            obj.recipeEntryBoxes.(thisProp{1}).([thisProp{2},'X']) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Position', [160, 18*(ii-1)+5, 30, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', [obj.recipePropertyNames{ii},'||X']);

            obj.recipeEntryBoxes.(thisProp{1}).([thisProp{2},'Y']) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Position', [225, 18*(ii-1)+5, 35, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', [obj.recipePropertyNames{ii},'||Y']);

        elseif strcmp(thisProp{2},'scanmode')
            % The scan mode should be a drop-down as there are only a limited range of options.
            % The possibilities are stored in a property of the recipe class attached to the model.
            obj.recipeEntryBoxes.(thisProp{1}).(thisProp{2}) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Style', 'popupmenu', ...
                'String', obj.model.recipe.valid_scanMode_values, ...
                'Position', [140, 18*(ii-1)+5, textEditWidth, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', obj.recipePropertyNames{ii}); 
        else
            % Now deal with the remaining recipe fields
            % Numeric boxes can be smaller than text boxes, so figure out which is which and set the length:
            if ~isempty(regexp(obj.recipeFieldLabels{ii},'\(mm', 'once')) || ...
                ~isempty(regexp(obj.recipeFieldLabels{ii},'Prop\.', 'once')) || ...
                ~isempty(regexp(obj.recipeFieldLabels{ii},'Num\.', 'once')) 
                textEditWidth=45;
            else
                textEditWidth=145;
            end
            obj.recipeEntryBoxes.(thisProp{1}).(thisProp{2}) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Position', [140, 18*(ii-1)+5, textEditWidth, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', obj.recipePropertyNames{ii}); %The tag is used by obj.updateRecipePropertyInRecipeClass to update the recipe
        end

    end

    % The tooltips are optional, so if the user does not wich them, we simply wipe them here
    if obj.suppressToolTips
        p=fields(obj.recipeEntryBoxes);
        for ii=1:length(p)
            tmp=obj.recipeEntryBoxes.(p{ii});
            pp=fields(tmp);
            for kk=1:length(pp)
                set(tmp.(pp{kk}),'TooltipString','')
            end
        end
    end

end %populateRecipePanel
